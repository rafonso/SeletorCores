package seletorcores;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.beans.PropertyChangeListener;
import java.util.HashSet;
import java.util.Set;
import javax.swing.border.TitledBorder;

/**
 *
 * @author rafael
 */
public abstract class MultiSliderComponent extends javax.swing.JComponent implements PropertyChangeListener, ColorChangedListener, FocusListener {

    private ColorSliderPanel sliderPanelR;
    private ColorSliderPanel sliderPanelG;
    private ColorSliderPanel sliderPanelB;
    private ColorSliderPanel sliderPanelA;
    private ColorPanel colorPanel;
    private Set<ColorSliderPanel> colorSliders = new HashSet<ColorSliderPanel>();

    /** Creates new form MultiSliderComponent */
    public MultiSliderComponent() {
        this(0, null);
    }

    public MultiSliderComponent(int rows, String title) {
        initComponents();
        this.setRows(rows);
        if(title != null) {
            final TitledBorder border = javax.swing.BorderFactory.createTitledBorder(title);
            this.setBorder(border);
        }
    }

    public Color getCor() {
        return (this.sliderPanelA == null) ? //
                new Color(this.sliderPanelR.getValor(), this.sliderPanelG.getValor(), this.sliderPanelB.getValor()) : //
                new Color(this.sliderPanelR.getValor(), this.sliderPanelG.getValor(), this.sliderPanelB.getValor(), this.sliderPanelA.getValor());
    }

    protected void setSliderPanel(ColorSliderPanel comp, char tipo) {
        if (tipo == 'R') {
            this.sliderPanelR = comp;
        } else if (tipo == 'G') {
            this.sliderPanelG = comp;
        } else if (tipo == 'B') {
            this.sliderPanelB = comp;
        } else if (tipo == 'A') {
            this.sliderPanelA = comp;
        } else {
            throw new IllegalArgumentException(String.valueOf(tipo));
        }
        comp.addPropertyChangeListener(this);
        comp.addFocusListener(this);
        boolean adicionado = this.colorSliders.add(comp);
        if(adicionado) {
            comp.addFocusListener(this);
        }
        
    }

    protected void setRows(int rows) {
        GridLayout gridLayout = (GridLayout) super.getLayout();
        gridLayout.setRows(rows);
    }

    public void setColorPanel(ColorPanel colorPanel) {
        this.colorPanel = colorPanel;
    }

    public void propertyChange(java.beans.PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals(ColorSliderPanel.VALOR) && (this.colorPanel != null)) {
            this.colorPanel.setCor(this.getCor(), this);
        }
    }

    private void elementoFocado(boolean focado) {
        final TitledBorder borda = (TitledBorder) this.getBorder();
        final Font font = borda.getTitleFont();
        if(focado) {
            borda.setTitleFont(font.deriveFont(font.getStyle() | Font.BOLD));
        } else {
            borda.setTitleFont(font.deriveFont(font.getStyle() ^ Font.BOLD));
        }
//        System.out.println(font);
    }

    public void focusGained(FocusEvent e) {
        Component c = (Component) e.getSource();
//        System.out.println("Focado: " + c.getName());
        this.elementoFocado(true);
    }

    public void focusLost(FocusEvent e) {
        Component c = (Component) e.getSource();
//        System.out.println("Desfocado: " + c.getName());
        this.elementoFocado(false);
    }

    

    public abstract void colorChanged(Color color);

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout(3, 1));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
